#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
#include "BluetoothSerial.h"
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to enable it
#endif
BluetoothSerial SerialBT;

#define SERVOMIN  150 // 这是舵机脉冲的最小计数值（在4096个计数值中）
#define SERVOMAX  600 // 这是舵机脉冲的最大计数值（在4096个计数值中）
#define USMIN  600 // 这是舵机最小脉冲的微秒值，基于最小脉冲计数值150
#define USMAX  2400 // 这是舵机最大脉冲的微秒值，基于最大脉冲计数值600
#define SERVO_FREQ 50 // 模拟舵机运行频率约为50 Hz
uint8_t servonum = 0;
int w0 = 0, w1 = 0, w2 = 0, w3 = 0, w4 = 0, w5 = 0;//各舵机初始角度为0度
//以下为动作列表，各舵机对应角度
int houyang[]={-1 , 6 , 8 , -1 , 3 , 6 ,
2 , 9 , 20 , 0 , 11 , 16 ,
5 , 21 , 32 , 4 , 19 , 26 ,
19 , 37 , 45 , 7 , 27 , 36 ,
14 , 50 , 59 , 11 , 34 , 45 ,
19 , 64 , 76 , 15 , 41 , 54 ,
23 , 89 , 82 , 20 , 47 , 62 ,
28 , 89 , 82 , 23 , 53 , 69 ,
32 , 87 , 81 , 27 , 57 , 76 ,
35 , 88 , 81 , 30 , 61 , 80 ,
37 , 89 , 81 , 32 , 63 , 83 ,
39 , 88 , 81 , 33 , 63 , 83 ,
39 , 88 , 81 , 34 , 62 , 80 ,
38 , 88 , 81 , 34 , 59 , 75 ,
37 , 88 , 82 , 33 , 55 , 68 ,
35 , 72 , 82 , 32 , 50 , 61 ,
33 , 58 , 64 , 31 , 45 , 53 ,
31 , 47 , 50 , 30 , 40 , 45 ,
30 , 37 , 39 , 29 , 34 , 37 };

int doudong[]={
  3 , 3 , 3 , 3 , 3 , 3 ,
10 , 10 , 10 , 10 , 10 , 10 ,
16 , 16 , 16 , 16 , 16 , 16 ,
22 , 22 , 22 , 22 , 22 , 22 ,
28 , 28 , 28 , 28 , 28 , 28 ,
34 , 34 , 34 , 34 , 34 , 34 ,
39 , 39 , 39 , 39 , 39 , 39 ,
44 , 44 , 44 , 44 , 44 , 44 ,
48 , 48 , 48 , 48 , 48 , 48 ,
51 , 51 , 51 , 51 , 51 , 51 ,
53 , 53 , 53 , 53 , 53 , 53 ,
54 , 54 , 54 , 54 , 54 , 54 ,
54 , 54 , 54 , 54 , 54 , 54 ,
53 , 53 , 53 , 53 , 53 , 53 ,
51 , 51 , 51 , 51 , 51 , 51 ,
48 , 48 , 48 , 48 , 48 , 48 ,
44 , 44 , 44 , 44 , 44 , 44 ,
39 , 39 , 39 , 39 , 39 , 39 ,
34 , 34 , 34 , 34 , 34 , 34 
};

int yangtou[]=
{
  80 , 26 , 37 , 57 , 27 , 54 ,
81 , 37 , 41 , 57 , 31 , 57 ,
82 , 49 , 44 , 53 , 34 , 56 ,
84 , 63 , 47 , 48 , 38 , 53 ,
84 , 88 , 49 , 41 , 41 , 49 ,
77 , 85 , 51 , 33 , 43 , 45 ,
68 , 84 , 52 , 25 , 44 , 41 ,
60 , 82 , 50 , 17 , 44 , 37 ,
53 , 82 , 48 , 9 , 41 , 31 ,
48 , 82 , 40 , 2 , 35 , 26 ,
43 , 82 , 31 , -4 , 27 , 19 ,
42 , 82 , 23 , -10 , 18 , 13 ,
41 , 78 , 15 , -14 , 7 , 8 ,
45 , 62 , 8 , -15 , -3 , 5 ,
52 , 53 , 5 , -11 , -11 , 5 ,
65 , 48 , 4 , -5 , -17 , 8 ,
83 , 47 , 7 , 4 , -18 , 13 ,
82 , 50 , 11 , 13 , -16 , 21 ,
81 , 56 , 17 , 22 , -11 , 29 
};

int doudong2[]=
{
  23 , 17 , 8 , 11 , 29 , 32 ,
32 , 19 , 3 , 9 , 43 , 51 ,
41 , 22 , -9 , 8 , 57 , 77 ,
49 , 26 , 0 , 8 , 73 , 87 ,
55 , 30 , 2 , 11 , 86 , 87 ,
60 , 34 , 8 , 17 , 86 , 83 ,
62 , 39 , 16 , 24 , 86 , 85 ,
62 , 44 , 26 , 33 , 87 , 86 ,
59 , 49 , 39 , 43 , 68 , 76 ,
54 , 54 , 54 , 54 , 54 , 55 ,
49 , 59 , 76 , 67 , 43 , 39 ,
44 , 62 , 85 , 87 , 33 , 26 ,
39 , 62 , 83 , 87 , 24 , 16 ,
34 , 60 , 85 , 87 , 17 , 8 ,
30 , 56 , 85 , 86 , 11 , 2 ,
26 , 49 , 85 , 74 , 8 , 0 ,
22 , 41 , 77 , 57 , 8 , -9 ,
19 , 33 , 52 , 43 , 9 , 3 ,
17 , 24 , 32 , 29 , 11 , 8 
};

int act1_start[]={
  25 , -42 , 16 , -42 , 51 , -40 ,
72 , -37 , 16 , -39 , 51 , -35 ,
88 , -33 , 16 , -35 , 52 , -30 ,
71 , -29 , 16 , -31 , 53 , -25 ,
73 , -26 , 55 , -27 , -77 , 20 ,
72 , -22 , 18 , -23 , 56 , -15 ,
72 , -18 , 19 , -20 , -88 , -10 ,
72 , -15 , 60 , -16 , 60 , -6 ,
72 , -11 , 61 , -13 , 62 , -2 ,
71 , -8 , 63 , -9 , 65 , 1 ,
69 , -5 , 64 , -6 , 68 , 5 ,
70 , -2 , 66 , -3 , 72 , 9 ,
68 , 0 , 67 , -1 , 76 , 13 ,
67 , 1 , 69 , 0 , 83 , 16 ,
68 , 3 , 70 , 2 , 89 , 19 ,
68 , 5 , 71 , 4 , 88 , 21 ,
68 , 7 , 72 , 5 , 88 , 23 ,
68 , 8 , 73 , 6 , 87 , 25 ,
69 , 8 , 73 , 7 , 87 , 26 
};

int act1_end[]={

69 , 8 , 73 , 7 , 87 , 26 ,
66 , 7 , 72 , 6 , 88 , 25 ,
68 , 6 , 70 , 6 , 88 , 23 ,
67 , 4 , 68 , 5 , 75 , 20 ,
69 , 2 , 65 , 4 , 66 , 17 ,
70 , 0 , 61 , 3 , 59 , 14 ,
72 , -3 , 58 , 2 , 53 , 10 ,
71 , -6 , 53 , 0 , 46 , 7 ,
72 , -9 , 9 , -1 , 40 , 3 ,
72 , -12 , 44 , -2 , 34 , 0 ,
71 , -16 , 38 , -4 , 29 , -3 ,
83 , -19 , 32 , -7 , 23 , -7 ,
63 , -22 , 26 , -9 , 17 , -10 ,
17 , -24 , -11 , -11 , 11 , -13 ,
35 , -27 , -15 , -13 , 6 , -16 ,
23 , -28 , 6 , -16 , 0 , -11 ,
10 , -29 , -24 , -18 , -5 , -21 ,
-1 , -29 , -28 , -20 , -12 , -23 ,
-13 , -28 , -32 , -23 , -18 , -24 
};

int act2_start[]={
  3 , 1 , 0 , -1 , 0 , 0 ,
10 , 7 , 5 , 0 , 3 , 2 ,
17 , 12 , 10 , 2 , 7 , 5 ,
24 , 17 , 15 , 3 , 11 , 7 ,
31 , 23 , 19 , 5 , 14 , 10 ,
26 , 28 , 10 , 7 , 18 , 13 ,
45 , 33 , 27 , 9 , 21 , 16 ,
53 , 38 , 31 , 11 , 24 , 18 ,
60 , 44 , 35 , 13 , 27 , 21 ,
69 , 49 , 39 , 14 , 30 , 23 ,
81 , 55 , 43 , 16 , 33 , 25 ,
83 , 61 , 46 , 17 , 35 , 27 ,
83 , 67 , 49 , 18 , 38 , 29 ,
83 , 75 , 52 , 19 , 40 , 31 ,
84 , 89 , 54 , 20 , 41 , 32 ,
82 , 89 , 57 , 21 , 43 , 33 ,
85 , 89 , 58 , 22 , 44 , 34 ,
82 , 89 , 60 , 22 , 45 , 35 ,
79 , 89 , 60 , 22 , 46 , 36 
};

int act2_end[]={

79 , 89 , 60 , 22 , 46 , 36 ,
82 , 89 , 60 , 22 , 45 , 35 ,
85 , 89 , 58 , 22 , 44 , 34 ,
82 , 89 , 57 , 21 , 43 , 33 ,
84 , 89 , 54 , 20 , 42 , 32 ,
83 , 75 , 52 , 19 , 40 , 31 ,
83 , 67 , 49 , 18 , 38 , 29 ,
83 , 61 , 46 , 17 , 35 , 27 ,
81 , 55 , 43 , 16 , 33 , 25 ,
69 , 49 , 39 , 14 , 30 , 23 ,
61 , 44 , 35 , 13 , 27 , 21 ,
53 , 38 , 32 , 11 , 24 , 18 ,
45 , 33 , 28 , 9 , 21 , 16 ,
26 , 28 , 10 , 7 , 18 , 13 ,
31 , 23 , 19 , 5 , 14 , 10 ,
25 , 18 , 15 , 3 , 11 , 7 ,
18 , 12 , 10 , 2 , 7 , 5 ,
10 , 7 , 5 , 0 , 3 , 2 ,
3 , 1 , 1 , -1 , 0 , 0 
};

int act3[]={
  19 , 42 , 24 , 50 , 26 , 47 ,
15 , 37 , 25 , 53 , 30 , 48 ,
11 , 33 , 26 , 57 , 33 , 49 ,
7 , 29 , 28 , 61 , 37 , 50 ,
3 , 24 , 29 , 64 , 40 , 51 ,
0 , 20 , 30 , 69 , 44 , 51 ,
-2 , 16 , 31 , 73 , 48 , 51 ,
-6 , 12 , 33 , 78 , 52 , 52 ,
-8 , 8 , 34 , 85 , 56 , 52 ,
-11 , 5 , 35 , 83 , 60 , 52 ,
-14 , 1 , 36 , 83 , 65 , 52 ,
-16 , -2 , 37 , 84 , 70 , 51 ,
-18 , -5 , 39 , 84 , 76 , 51 ,
-19 , -20 , 40 , 84 , 84 , 51 ,
-20 , -22 , 41 , 84 , 87 , 50 ,
-21 , -24 , 42 , 86 , 86 , 49 ,
-22 , -16 , 43 , 86 , 86 , 49 ,
-22 , -18 , 44 , 86 , 85 , 48 ,
-21 , -19 , 45 , 86 , 86 , 47 
};

int act4[]={
  37 , 33 , 34 , 29 , 33 , 30 ,
42 , 33 , 36 , 26 , 34 , 28 ,
47 , 33 , 38 , 22 , 35 , 25 ,
51 , 34 , 40 , 19 , 36 , 23 ,
57 , 34 , 42 , 16 , 37 , 21 ,
62 , 35 , 44 , 13 , 38 , 19 ,
69 , 36 , 46 , 11 , 39 , 20 ,
76 , 37 , 48 , 8 , 41 , 20 ,
67 , 38 , 50 , 6 , 42 , 20 ,
81 , 39 , 53 , 4 , 43 , 20 ,
80 , 40 , 55 , 2 , 44 , 20 ,
75 , 41 , 56 , 1 , 45 , 20 ,
80 , 42 , 58 , 0 , 47 , 21 ,
79 , 43 , 60 , -1 , 48 , 21 ,
77 , 44 , 61 , -2 , 49 , 21 ,
79 , 44 , 63 , -2 , 49 , 22 ,
79 , 45 , 64 , -3 , 50 , 22 ,
79 , 45 , 64 , -4 , 50 , 22 ,
78 , 46 , 65 , -4 , 51 , 22 
};

int act5[]={
  34 , 32 , 39 , 34 , 32 , 26 ,
35 , 31 , 47 , 35 , 31 , 20 ,
36 , 31 , 54 , 36 , 31 , 15 ,
38 , 30 , 63 , 38 , 30 , 9 ,
39 , 30 , 73 , 39 , 30 , 4 ,
40 , 30 , 82 , 41 , 29 , -1 ,
42 , 29 , 81 , 43 , 29 , -3 ,
44 , 29 , 82 , 45 , 29 , -6 ,
45 , 30 , 84 , 47 , 29 , -9 ,
26 , 30 , 84 , 49 , 29 , -11 ,
49 , 30 , 82 , 51 , 29 , -13 ,
50 , 30 , 81 , 54 , 29 , -15 ,
52 , 30 , 85 , 56 , 29 , -17 ,
53 , 30 , 77 , 59 , 29 , -19 ,
54 , 31 , 78 , 61 , 29 , -20 ,
55 , 31 , 78 , 63 , 29 , -21 ,
56 , 31 , 77 , 65 , 29 , -22 ,
57 , 31 , 75 , 67 , 29 , -23 ,
57 , 31 , 75 , 68 , 29 , -23 
};

int act6[]={
  36 , 30 , 31 , 28 , 38 , 35 ,
40 , 26 , 29 , 23 , 44 , 38 ,
44 , 23 , 27 , 18 , 50 , 40 ,
48 , 21 , 26 , 13 , 56 , 43 ,
52 , 18 , 25 , 9 , 63 , 47 ,
56 , 16 , 23 , 5 , 70 , 50 ,
60 , 15 , 23 , 1 , 80 , 54 ,
65 , 15 , 22 , -2 , 81 , 59 ,
51 , 14 , 21 , -5 , 81 , 64 ,
56 , 14 , 0 , -8 , 80 , 71 ,
82 , 14 , 20 , -11 , 81 , 86 ,
71 , 14 , 20 , -14 , 79 , 86 ,
79 , 13 , 20 , -16 , 80 , 85 ,
79 , 13 , 19 , -18 , 80 , 84 ,
79 , 13 , 19 , -20 , 77 , 82 ,
79 , 13 , 19 , -21 , 88 , 82 ,
79 , 13 , 19 , -22 , 88 , 84 ,
78 , 13 , 19 , -23 , 88 , 81 ,
78 , 13 , 19 , -23 , 77 , 81 
};

int act7_start[]={
  8 , 1 , 4 , 7 , 2 , 5 ,
20 , 6 , 12 , 19 , 8 , 15 ,
32 , 12 , 19 , 29 , 15 , 21 ,
44 , 17 , 27 , 40 , 21 , 35 ,
56 , 22 , 34 , 49 , 27 , 44 ,
69 , 27 , 40 , 58 , 32 , 55 ,
85 , 32 , 45 , 67 , 37 , 65 ,
80 , 34 , 49 , 73 , 42 , 80 ,
80 , 36 , 51 , 78 , 44 , 89 ,
80 , 39 , 52 , 80 , 45 , 88 ,
80 , 36 , 51 , 78 , 44 , 89 ,
80 , 34 , 49 , 73 , 42 , 80 ,
85 , 32 , 45 , 67 , 38 , 66 ,
69 , 27 , 40 , 59 , 32 , 55 ,
56 , 22 , 34 , 50 , 27 , 44 ,
44 , 17 , 27 , 40 , 21 , 35 ,
33 , 12 , 20 , 30 , 15 , 21 ,
21 , 7 , 12 , 19 , 8 , 15 ,
8 , 1 , 4 , 7 , 2 , 6 
};

int act7_end[]={
  1 , 8 , 5 , 2 , 7 , 4 ,
6 , 20 , 15 , 8 , 19 , 12 ,
12 , 32 , 21 , 15 , 29 , 19 ,
17 , 44 , 35 , 21 , 40 , 27 ,
22 , 56 , 44 , 27 , 49 , 34 ,
27 , 69 , 55 , 32 , 58 , 40 ,
32 , 85 , 65 , 37 , 67 , 45 ,
34 , 80 , 80 , 42 , 73 , 49 ,
36 , 81 , 88 , 44 , 78 , 51 ,
39 , 81 , 88 , 45 , 80 , 52 ,
36 , 80 , 88 , 44 , 78 , 51 ,
34 , 80 , 80 , 42 , 73 , 49 ,
32 , 85 , 66 , 38 , 67 , 45 ,
27 , 69 , 55 , 32 , 59 , 40 ,
22 , 56 , 44 , 27 , 50 , 34 ,
17 , 44 , 35 , 21 , 40 , 27 ,
12 , 33 , 21 , 15 , 30 , 20 ,
7 , 21 , 15 , 8 , 19 , 12 ,
1 , 8 , 6 , 2 , 7 , 4 
};

int act8_start[]={
  18 , 10 , 18 , 10 , 18 , 10 ,
23 , 7 , 8 , 7 , 23 , 7 ,
28 , 4 , 28 , 4 , 28 , 4 ,
33 , 1 , 33 , 1 , 33 , 1 ,
38 , 0 , 38 , 0 , 38 , 0 ,
44 , -2 , 44 , -2 , 44 , -2 ,
25 , -3 , 25 , -3 , 50 , -3 ,
30 , -4 , 30 , -4 , 56 , -4 ,
63 , -5 , 63 , -5 , 63 , -5 ,
70 , -5 , 70 , -5 , 70 , -5 ,
79 , -5 , 79 , -5 , 79 , -5 ,
61 , -5 , 61 , -5 , 89 , -5 ,
75 , -5 , 75 , -5 , 75 , -5 ,
75 , -5 , 75 , -5 , 75 , -5 ,
76 , -4 , 75 , -4 , 75 , -4 ,
76 , -4 , 75 , -4 , 76 , -4 ,
75 , -4 , 76 , -4 , 75 , -4 ,
75 , -4 , 75 , -4 , 75 , -4 ,
75 , -3 , 74 , -3 , 74 , -3 
};
int act8_end[]={
  75 , -3 , 74 , -3 , 74 , -3 ,
75 , -4 , 75 , -4 , 75 , -4 ,
75 , -4 , 76 , -4 , 75 , -4 ,
76 , -4 , 75 , -4 , 76 , -4 ,
76 , -4 , 75 , -4 , 76 , -4 ,
75 , -5 , 75 , -5 , 75 , -5 ,
75 , -5 , 75 , -5 , 75 , -5 ,
61 , -5 , 61 , -5 , 89 , -5 ,
79 , -5 , 79 , -5 , 79 , -5 ,
70 , -5 , 70 , -5 , 70 , -5 ,
63 , -5 , 63 , -5 , 63 , -5 ,
30 , -4 , 30 , -4 , 56 , -4 ,
25 , -3 , 25 , -3 , 50 , -3 ,
44 , -2 , 44 , -2 , 44 , -2 ,
38 , 0 , 38 , 0 , 38 , 0 ,
33 , 1 , 33 , 1 , 33 , 1 ,
28 , 4 , 28 , 4 , 28 , 4 ,
23 , 7 , 8 , 7 , 23 , 7 ,
18 , 10 , 18 , 10 , 18 , 10 
};

void setup() {
  Serial.begin(115200);
  pwm.begin();
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(SERVO_FREQ);  // 模拟舵机运行频率约为50 Hz
  SerialBT.begin("ESP32"); // Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!"); 
  while (!SerialBT.connected()) {
    delay(100);
  } 
  Serial.println("Bluetooth connected!");
}

void setServoPulse(uint8_t n, double pulse) {
  double pulselength;
  pulselength = 1000000;   // 每秒有1,000,000微秒
  pulselength /= SERVO_FREQ;   // 模拟舵机运行频率约为50 Hz
  pulselength /= 4096;  // 12位分辨率
  pulse *= 1000000;  // 将输入的秒数转换为微秒
  pulse /= pulselength;
  pwm.setPWM(n, 0, pulse);
}

void Action(int arr[])
{
    int len = 114;
    //Serial.println(len);
    for(int i=0;i<len/6;i++)
    {
    w2=arr[0+i*6];
    w1=arr[1+i*6];
    w0=arr[2+i*6];
    w5=arr[3+i*6];
    w4=arr[4+i*6];
    w3=arr[5+i*6];
    if(-90<w2 and w2<90 and -90<w1 and w1<90 and -90<w0 and w0<90 and -90<w5 and w5<90 and -90<w4 and w4<90 and -90<w3 and w3<90)
    {// 根据接收到的值设置舵机位置
    pwm.setPWM(0, 0, 270 - w0 * 2); // 越小越上
    pwm.setPWM(1, 0, 270 + w1 * 2); // 越小越下
    pwm.setPWM(2, 0, 300 - w2 * 2); // 越小越上
    pwm.setPWM(3, 0, 270 + w3 * 2); // 越小越下
    pwm.setPWM(4, 0, 290 - w4 * 2); // 越小越上
    pwm.setPWM(5, 0, 290 + w5 * 2); // 越小越下
    }
     delay(36);
    }
}


void loop() {
  if (Serial.available()) {
    char s1=Serial.read();
    SerialBT.write(s1);
  }
  if (SerialBT.available()) {
    char s2=SerialBT.read();//蓝牙接收命令
    Serial.write(s2);
    if(s2=='1')//被唤醒
    {
    int num = random(1, 5); // num是1，2，3，4中的一个
      if(num==1)
    {
      Action(houyang);
    }
      if(num==2)
    {
      Action(doudong);
    }
      if(num==3)
    {
      Action(yangtou);
    }
      if(num==4)
    {
      Action(doudong2);
    }
    num=0;
  }

    if(s2=='2')//未唤醒时的随机动作
    {
    int num = random(1, 10); // num是1，2，3..10中的一个
    if(num==1)
    {
      Action(act1_start);
      delay(1000);
      Action(act1_end);
    }
        if(num==2)
    {
      Action(act2_start);
      delay(1000);
      Action(act2_end);
    }
        if(num==3)
    {
      Action(act3);
    }
        if(num==4)
    {
      Action(act4);
    }

        if(num==5)
    {
      Action(act5);
    }
        if(num==6)
    {
      Action(act6);
    }

        if(num==7)
    {
      Action(act7_start);
      delay(1000);
      Action(act7_end);
    }

        if(num==8)
    {
      Action(act8_start);
      delay(1000);
      Action(act8_end);
    }
        if(num==9)
    {
      Action(doudong2);
    }    
    num=0;
  }
  
}
  delay(10);    
}
